def permute(bits, table):
    return [bits[i] for i in table]

def xor(a, b):
    return [i ^ j for i, j in zip(a, b)]

def s_box_lookup(bits, sbox):
    row = (bits[0] << 1) | bits[3]
    col = (bits[1] << 1) | bits[2]
    val = sbox[row][col]
    return [val >> 1 & 1, val & 1]

def fk(bits, key):
    EP = [3, 0, 1, 2, 1, 2, 3, 0]
    S0 = [[1,0,3,2],[3,2,1,0],[0,2,1,3],[3,1,3,2]]
    S1 = [[0,1,2,3],[2,0,1,3],[3,0,1,0],[2,1,0,3]]
    P4 = [1,3,2,0]
    
    left = bits[:4]
    right = bits[4:]
    temp = permute(right, EP)
    temp = xor(temp, key)
    left_sbox = s_box_lookup(temp[:4], S0)
    right_sbox = s_box_lookup(temp[4:], S1)
    combined = left_sbox + right_sbox
    return xor(left, permute(combined, P4)) + right

def sdes_encrypt(plain, key):
    IP = [1,5,2,0,3,7,4,6]
    IP_inv = [3,0,2,4,6,1,7,5]
    K1 = key[:8]  # simplifying key schedule
    K2 = key[:8]
    
    bits = permute(plain, IP)
    bits = fk(bits, K1)
    bits = bits[4:] + bits[:4]  # swap
    bits = fk(bits, K2)
    return permute(bits, IP_inv)

def sdes_decrypt(cipher, key):
    IP = [1,5,2,0,3,7,4,6]
    IP_inv = [3,0,2,4,6,1,7,5]
    K1 = key[:8]
    K2 = key[:8]
    
    bits = permute(cipher, IP)
    bits = fk(bits, K2)
    bits = bits[4:] + bits[:4]
    bits = fk(bits, K1)
    return permute(bits, IP_inv)

def str_to_bits(s):
    return [int(b) for b in f'{s:08b}']

def bits_to_str(bits):
    return int("".join(str(b) for b in bits), 2)

def cbc_encrypt_sdes(plaintext_blocks, key, iv):
    prev = str_to_bits(iv)
    encrypted = []
    for pt in plaintext_blocks:
        pt_bits = str_to_bits(pt)
        xored = xor(pt_bits, prev)
        cipher_bits = sdes_encrypt(xored, key)
        encrypted.append(cipher_bits)
        prev = cipher_bits
    return encrypted

def cbc_decrypt_sdes(ciphertext_blocks, key, iv):
    prev = str_to_bits(iv)
    decrypted = []
    for ct in ciphertext_blocks:
        ct_bits = ct
        temp = sdes_decrypt(ct_bits, key)
        pt_bits = xor(temp, prev)
        decrypted.append(pt_bits)
        prev = ct_bits
    return decrypted

# --- Testing ---

key = str_to_bits(0b01111111)  # 8-bit dummy key
iv = 0b10101010
plaintext = [0b00000001, 0b00100011]

print("Encryption:")
enc_blocks = cbc_encrypt_sdes(plaintext, key, iv)
for block in enc_blocks:
    print("".join(map(str, block)))

print("\nDecryption:")
dec_blocks = cbc_decrypt_sdes(enc_blocks, key, iv)
for block in dec_blocks:
    print("".join(map(str, block)))


